// below is an expression we're currently able to parse and print
-123 * (45.67);

// we can also do print statements now
print "one";
print true;
print 1000 + 300 + 30 + 7;

// we can also declare, assign and use variables now
var i = 1;
i = 1337;
var s = "this is an example string";
print i;
print s;

print i == s;  // this is comment next to a test for equality

/* this is an example block comment */

/* this block comment
 * has multiple
 * lines */
// /* this is an unterminated comment block causing an error when uncommented

print "";
var a = "global a";
var b = "global b";
var c = "global c";
{
    var a = "outer a";
    var b = "outer b";
    {
        var a = "inner a";
        print a;
        print b;
        print c;
    }
    print a;
    print b;
    print c;
}
print a;
print b;
print c;

// fibonacci elements
print "";
var a = 0;
var temp;

for (var b = 1; a < 10000; b = temp + b) {
    print a;
    temp = a;
    a = b;
}

// functions are now also supported!
print "";
fun sayHi(first, last) {
    print "Hi, " + first + " " + last + "!";
}

sayHi("Hello", "World");
sayHi("Tim", "Klein Nijenhuis");

// fibonacci numbers using a recursive function!
print "";
fun fib(n) {
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i <= 20; i = i + 1) {
    print fib(i);
}

// counter tests
print "";
fun makeCounter() {
    var i = 0;
    fun count() {
        i = i + 1;
        print i;
    }
    return count;
}

var counter = makeCounter();
counter();  // "1"
counter();  // "2"

// test that we've fixed scoping and variable resolution
// this should print "global" both times, and not "block"
print "";
var a = "global";
{
    fun showA() {
        print a;
    }

    showA();
    var a = "block";
    showA();
}

// test that we can parse and execute classes
print "";
class DevonshireCream {
    serveOn() {
        return "Scones";
    }
}
print DevonshireCream; // should print "DevonshireCream"
// test that we can create class instances
class Bagel {}
var bagel = Bagel();
print bagel;  // should print "Bagel instance"
// test that we can call methods of class instances
class Bacon {
    eat() {
        print "Crunch crunch crunch!";
    }
}
Bacon().eat();  // should print "Crunch crunch crunch!"
// test that we have this in methods of instances
class Cake {
    taste() {
        var adjective = "delicious";
        print "The " + this.flavor + " cake is " + adjective + "!";
    }
}
var cake = Cake();
cake.flavor = "German chocolate";
cake.taste();  // should print "The German chocolate cake is delicious"
